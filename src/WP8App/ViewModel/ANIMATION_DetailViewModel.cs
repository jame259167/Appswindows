// ------------------------------------------------------------------------
// ========================================================================
// THIS CODE AND INFORMATION ARE GENERATED BY AUTOMATIC CODE GENERATOR
// ========================================================================
// Template:   ViewModel.tt
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Input;
using Controls=WPAppStudio.Controls;
using Entities=WPAppStudio.Entities;
using EntitiesBase=WPAppStudio.Entities.Base;
using IServices=WPAppStudio.Services.Interfaces;
using IViewModels=WPAppStudio.ViewModel.Interfaces;
using Localization=WPAppStudio.Localization;
using Repositories=WPAppStudio.Repositories;
using Services=WPAppStudio.Services;
using ViewModelsBase=WPAppStudio.ViewModel.Base;
using WPAppStudio;
using WPAppStudio.Shared;

namespace WPAppStudio.ViewModel
{
    /// <summary>
    /// Implementation of ANIMATION_Detail ViewModel.
    /// </summary>
    [CompilerGenerated]
    [GeneratedCode("Radarc", "4.0")]
    public partial class ANIMATION_DetailViewModel : ViewModelsBase.VMBase, IViewModels.IANIMATION_DetailViewModel, ViewModelsBase.INavigable
    {       

		private readonly Repositories.ANIMATION_ANIMATION _aNIMATION_ANIMATION;
		private readonly IServices.IDialogService _dialogService;
		private readonly IServices.INavigationService _navigationService;
		private readonly IServices.ISpeechService _speechService;
		private readonly IServices.IShareService _shareService;
		private readonly IServices.ILiveTileService _liveTileService;
		
        /// <summary>
        /// Initializes a new instance of the <see cref="ANIMATION_DetailViewModel" /> class.
        /// </summary>
        /// <param name="aNIMATION_ANIMATION">The Animation_animation.</param>
        /// <param name="dialogService">The Dialog Service.</param>
        /// <param name="navigationService">The Navigation Service.</param>
        /// <param name="speechService">The Speech Service.</param>
        /// <param name="shareService">The Share Service.</param>
        /// <param name="liveTileService">The Live Tile Service.</param>
        public ANIMATION_DetailViewModel(Repositories.ANIMATION_ANIMATION aNIMATION_ANIMATION, IServices.IDialogService dialogService, IServices.INavigationService navigationService, IServices.ISpeechService speechService, IServices.IShareService shareService, IServices.ILiveTileService liveTileService)
        {
			_aNIMATION_ANIMATION = aNIMATION_ANIMATION;
			_dialogService = dialogService;
			_navigationService = navigationService;
			_speechService = speechService;
			_shareService = shareService;
			_liveTileService = liveTileService;
        }
		
	
		private Entities.ANIMATIONSchema _currentANIMATIONSchema;

        /// <summary>
        /// CurrentANIMATIONSchema property.
        /// </summary>		
        public Entities.ANIMATIONSchema CurrentANIMATIONSchema
        {
            get
            {
				return _currentANIMATIONSchema;
            }
            set
            {
                SetProperty(ref _currentANIMATIONSchema, value);
            }
        }
	
		private bool _hasNextpanoramaANIMATION_Detail0;

        /// <summary>
        /// HasNextpanoramaANIMATION_Detail0 property.
        /// </summary>		
        public bool HasNextpanoramaANIMATION_Detail0
        {
            get
            {
				return _hasNextpanoramaANIMATION_Detail0;
            }
            set
            {
                SetProperty(ref _hasNextpanoramaANIMATION_Detail0, value);
            }
        }
	
		private bool _hasPreviouspanoramaANIMATION_Detail0;

        /// <summary>
        /// HasPreviouspanoramaANIMATION_Detail0 property.
        /// </summary>		
        public bool HasPreviouspanoramaANIMATION_Detail0
        {
            get
            {
				return _hasPreviouspanoramaANIMATION_Detail0;
            }
            set
            {
                SetProperty(ref _hasPreviouspanoramaANIMATION_Detail0, value);
            }
        }

        /// <summary>
        /// Delegate method for the TextToSpeechANIMATION_DetailStaticControlCommand command.
        /// </summary>
        public  void TextToSpeechANIMATION_DetailStaticControlCommandDelegate() 
        {
				_speechService.TextToSpeech(CurrentANIMATIONSchema.Subtitle + " " + CurrentANIMATIONSchema.Description);
        }
		

        private ICommand _textToSpeechANIMATION_DetailStaticControlCommand;

        /// <summary>
        /// Gets the TextToSpeechANIMATION_DetailStaticControlCommand command.
        /// </summary>
        public ICommand TextToSpeechANIMATION_DetailStaticControlCommand
        {
            get { return _textToSpeechANIMATION_DetailStaticControlCommand = _textToSpeechANIMATION_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(TextToSpeechANIMATION_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the ShareANIMATION_DetailStaticControlCommand command.
        /// </summary>
        public  void ShareANIMATION_DetailStaticControlCommandDelegate() 
        {
				_shareService.Share(CurrentANIMATIONSchema.Subtitle, CurrentANIMATIONSchema.Description, "", CurrentANIMATIONSchema.Image);
        }
		

        private ICommand _shareANIMATION_DetailStaticControlCommand;

        /// <summary>
        /// Gets the ShareANIMATION_DetailStaticControlCommand command.
        /// </summary>
        public ICommand ShareANIMATION_DetailStaticControlCommand
        {
            get { return _shareANIMATION_DetailStaticControlCommand = _shareANIMATION_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(ShareANIMATION_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the PinToStartANIMATION_DetailStaticControlCommand command.
        /// </summary>
        public  void PinToStartANIMATION_DetailStaticControlCommandDelegate() 
        {
				_liveTileService.PinToStart(typeof(IViewModels.IANIMATION_DetailViewModel), CreateTileInfoANIMATION_DetailStaticControl());
        }
		

        private ICommand _pinToStartANIMATION_DetailStaticControlCommand;

        /// <summary>
        /// Gets the PinToStartANIMATION_DetailStaticControlCommand command.
        /// </summary>
        public ICommand PinToStartANIMATION_DetailStaticControlCommand
        {
            get { return _pinToStartANIMATION_DetailStaticControlCommand = _pinToStartANIMATION_DetailStaticControlCommand ?? new ViewModelsBase.DelegateCommand(PinToStartANIMATION_DetailStaticControlCommandDelegate); }
        }

        /// <summary>
        /// Delegate method for the NextpanoramaANIMATION_Detail0 command.
        /// </summary>
        public  void NextpanoramaANIMATION_Detail0Delegate() 
        {
			var next =  _aNIMATION_ANIMATION.Next(CurrentANIMATIONSchema);

			if(next != null)
				CurrentANIMATIONSchema = next;

			RefreshHasPrevNext();
        }
		

        private ICommand _nextpanoramaANIMATION_Detail0;

        /// <summary>
        /// Gets the NextpanoramaANIMATION_Detail0 command.
        /// </summary>
        public ICommand NextpanoramaANIMATION_Detail0
        {
            get { return _nextpanoramaANIMATION_Detail0 = _nextpanoramaANIMATION_Detail0 ?? new ViewModelsBase.DelegateCommand(NextpanoramaANIMATION_Detail0Delegate); }
        }

        /// <summary>
        /// Delegate method for the PreviouspanoramaANIMATION_Detail0 command.
        /// </summary>
        public  void PreviouspanoramaANIMATION_Detail0Delegate() 
        {
			var prev =  _aNIMATION_ANIMATION.Previous(CurrentANIMATIONSchema);

			if(prev != null)
				CurrentANIMATIONSchema = prev;

			RefreshHasPrevNext();
        }
		

        private ICommand _previouspanoramaANIMATION_Detail0;

        /// <summary>
        /// Gets the PreviouspanoramaANIMATION_Detail0 command.
        /// </summary>
        public ICommand PreviouspanoramaANIMATION_Detail0
        {
            get { return _previouspanoramaANIMATION_Detail0 = _previouspanoramaANIMATION_Detail0 ?? new ViewModelsBase.DelegateCommand(PreviouspanoramaANIMATION_Detail0Delegate); }
        }

        private void RefreshHasPrevNext()
        {
            HasPreviouspanoramaANIMATION_Detail0 = _aNIMATION_ANIMATION.HasPrevious(CurrentANIMATIONSchema);
			HasNextpanoramaANIMATION_Detail0 = _aNIMATION_ANIMATION.HasNext(CurrentANIMATIONSchema);
		}
		public object NavigationContext
        {
            set
            {              
                if (!(value is Entities.ANIMATIONSchema)) { return; }
                
                CurrentANIMATIONSchema = value as Entities.ANIMATIONSchema;
                RefreshHasPrevNext();
            }
        }
        /// <summary>
        /// Initializes a <see cref="Services.TileInfo" /> object for the ANIMATION_DetailStaticControl control.
        /// </summary>
		/// <returns>A <see cref="Services.TileInfo" /> object.</returns>
        public Services.TileInfo CreateTileInfoANIMATION_DetailStaticControl()
        {
            var tileInfo = new Services.TileInfo
            {
                CurrentId = CurrentANIMATIONSchema.Id.ToString(),
                Title = CurrentANIMATIONSchema.Subtitle,
                BackTitle = CurrentANIMATIONSchema.Subtitle,
                BackContent = CurrentANIMATIONSchema.Description,
                Count = 0,
                BackgroundImagePath = CurrentANIMATIONSchema.Image,
                BackBackgroundImagePath = CurrentANIMATIONSchema.Image,
                LogoPath = "Item-88d6e0cf-33a5-48ca-8c1f-d46142964cd8.png"
            };
            return tileInfo;
        }
    }
}
